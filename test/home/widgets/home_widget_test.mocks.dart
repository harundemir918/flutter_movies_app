// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_movies_app/test/home/widgets/home_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:flutter_movies_app/core/bloc/home/home_bloc.dart' as _i3;
import 'package:flutter_movies_app/core/models/genre_model.dart' as _i4;
import 'package:flutter_movies_app/core/resources/repository/abstract/abstract_genres_repository.dart'
    as _i2;
import 'package:flutter_movies_app/core/resources/repository/genres/fake/fake_genres_repository.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractGenresRepository_0 extends _i1.SmartFake
    implements _i2.AbstractGenresRepository {
  _FakeAbstractGenresRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_1 extends _i1.SmartFake implements _i3.HomeState {
  _FakeHomeState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i3.HomeBloc {
  MockHomeBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AbstractGenresRepository get genresRepository => (super.noSuchMethod(
        Invocation.getter(#genresRepository),
        returnValue: _FakeAbstractGenresRepository_0(
          this,
          Invocation.getter(#genresRepository),
        ),
      ) as _i2.AbstractGenresRepository);
  @override
  List<_i4.GenreModel> get genresList => (super.noSuchMethod(
        Invocation.getter(#genresList),
        returnValue: <_i4.GenreModel>[],
      ) as List<_i4.GenreModel>);
  @override
  set genresList(List<_i4.GenreModel>? _genresList) => super.noSuchMethod(
        Invocation.setter(
          #genresList,
          _genresList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.HomeState);
  @override
  _i5.Stream<_i3.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.HomeState>.empty(),
      ) as _i5.Stream<_i3.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i3.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.HomeEvent>(
    _i6.EventHandler<E, _i3.HomeState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(_i6.Transition<_i3.HomeEvent, _i3.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeEvent].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockHomeEvent extends _i1.Mock implements _i3.HomeEvent {
  MockHomeEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [HomeState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockHomeState extends _i1.Mock implements _i3.HomeState {
  MockHomeState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [FakeGenresRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeGenresRepository extends _i1.Mock
    implements _i7.FakeGenresRepository {
  MockFakeGenresRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i4.GenreModel>> fetchGenresList() => (super.noSuchMethod(
        Invocation.method(
          #fetchGenresList,
          [],
        ),
        returnValue: _i5.Future<List<_i4.GenreModel>>.value(<_i4.GenreModel>[]),
      ) as _i5.Future<List<_i4.GenreModel>>);
  @override
  List<_i4.GenreModel> filterGenresList(
    String? keyword,
    List<_i4.GenreModel>? genresList,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterGenresList,
          [
            keyword,
            genresList,
          ],
        ),
        returnValue: <_i4.GenreModel>[],
      ) as List<_i4.GenreModel>);
}
